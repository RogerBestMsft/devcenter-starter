# This is a basic workflow to help you get started with Actions
name: Deploy Azure DevCenters
run-name: Deploy Azure DevCenters

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "AddWorkflow" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  
permissions:
  id-token: write
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  devcenter_configuration_matrix:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.dc-configuration-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: set-dc-configuration-matrix
        id: dc-configuration-matrix
        working-directory: ./devCenter/config
        run: echo "matrix=$(ls | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  build_devcenters:
    # Matrix of subscriptions
    strategy:
      matrix:
        configurations: ${{ fromJson(needs.devcenter_configuration_matrix.outputs.matrix) }}

        # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: devcenter_configuration_matrix
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install dos2unix
      - name: Install Dos2Unix
        run: sudo apt-get install dos2unix

      # Install az cli devcenter extension
      - name: Install DevCenter cli extension
        run: az extension add --name devcenter --allow-preview true

      # Get subscription from configuration file
      - name: 'Get Subscription Id'
        id: SubscriptionId
        working-directory: ./devCenter/config
        run: echo "SUBSCRIPTIONID=$(jq --raw-output .subscription ${{ matrix.configurations }})" >> $GITHUB_OUTPUT

      # Get name from configuration file
      - name: 'Get DevCenter Name'
        id: DevCenterName
        working-directory: ./devCenter/config
        run: echo "DEVCENTERNAME=$(jq --raw-output .name ${{ matrix.configurations }})" >> $GITHUB_OUTPUT

      # Get name from configuration file
      - name: 'Get Secrets Name'
        id: DCSecrets
        working-directory: ./devCenter/config
        run: echo "DC_Secrets=$(jq --raw-output .secrets ${{ matrix.configurations }})" >> $GITHUB_OUTPUT

      # Connect to cli using openid auth
      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ steps.SubscriptionId.outputs.SUBSCRIPTIONID }}
  
      # Get secrets
      - name: 'Convert secrets'
        working-directory: ./devCenter
        env:
          SECRET_NAME: ${{ secrets[steps.DCSecrets.outputs.DC_Secrets] }}
        run: echo ${{ env.SECRET_NAME }} | base64 --decode > secrets-${{ steps.DevCenterName.outputs.DEVCENTERNAME }}.json

      # Debug
      - name: 'test'
        id: test
        working-directory: ./devCenter
        env:
          SECRET_FILE: './secrets-${{ steps.DevCenterName.outputs.DEVCENTERNAME }}.json'
        run: echo "DC_TEST=$(cat ${{ env.SECRET_FILE }})"
        #run: cat ./secrets_${{ steps.DevCenterName.outputs.DEVCENTERNAME }}
        #run: ls
        #run: cat ${{ env.SECRET_FILE}}

      # # Debug
      # - name: 'test2'
      #   working-directory: ./devCenter
      #   #run: cat ./secrets_${{ steps.DevCenterName.outputs.DEVCENTERNAME }}
      #   run: ls
      #   #run: echo "$(./config/${{ matrix.configurations }})"

        # Create DevCenters
      - name: 'Create DevCenters ${{ steps.DevCenterName.outputs.DEVCENTERNAME }} '
        working-directory: ./devCenter
        env:
          SECRET_NAME: ${{ secrets[steps.DCSecrets.outputs.DC_Secrets] }}
          SECRET_FILE: './secrets-${{ steps.DevCenterName.outputs.DEVCENTERNAME }}.json'
        run: bash setup.sh './config/${{ matrix.configurations }}' $(cat ${{ env.SECRET_FILE }})
        #run: bash setup.sh -c './config/${{ matrix.configurations }}' -s ${{ steps.test.outputs.DC_TEST }}
        #run: bash setup.sh -c './config/${{ matrix.configurations }}' -s $(cat ${{ env.SECRET_FILE }})
        #run: cat ${{ env.SECRET_FILE }}
        #run: bash setup.sh -c './config/${{ matrix.configurations }}' -s ${{ toJson(env.TEST)}}
        #run: bash setup.sh -c './config/${{ matrix.configurations }}' -s '$(<secrets_${{ steps.DevCenterName.outputs.DEVCENTERNAME }}.json )'
        #run: echo "DC completed."
        #run: echo "$(<secrets_${{ steps.DevCenterName.outputs.DEVCENTERNAME }}.json )"
            
  project_configuration_matrix:
    runs-on: ubuntu-latest
    needs: build_devcenters
    
    outputs:
      matrix: ${{ steps.prj-configuration-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: set-prj-configuration-matrix
        id: prj-configuration-matrix
        working-directory: ./devProject/config
        run: echo "matrix=$(ls | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  build_projects:
    # Matrix of subscriptions
    strategy:
      matrix:
        configurations: ${{ fromJson(needs.project_configuration_matrix.outputs.matrix) }}

        # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: project_configuration_matrix
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Get subscription from configuration file
      - name: 'Get Subscription Id'
        id: SubscriptionId
        working-directory: ./devProject/config
        run: echo "SUBSCRIPTIONID=$(jq --raw-output .subscription ${{ matrix.configurations }})" >> $GITHUB_OUTPUT

        # Get subscription from configuration file
      - name: 'Get Name'
        id: ProjectName
        working-directory: ./devProject/config
        run: echo "PROJECTNAME=$(jq --raw-output .name ${{ matrix.configurations }})" >> $GITHUB_OUTPUT

      # Get resource id from configuration file
      - name: 'Get DevCenter Resource Id'
        id: DevCenterId
        working-directory: ./devProject/config
        run: echo "DEVCENTERID=$(jq --raw-output .devcenterid ${{ matrix.configurations }})" >> $GITHUB_OUTPUT
    
      # Connect to cli using openid auth
      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ steps.SubscriptionId.outputs.SUBSCRIPTIONID }}

      # Get secrets
      - name: 'Convert secrets'
        working-directory: ./devProject
        run: echo ${{ secrets.DEVPROJECT_SECRETS }} | base64 --decode > projectsecrets_${{ steps.ProjectName.outputs.PROJECTNAME }}.json

      # Test secrets
      - name: 'Test secrets'
        working-directory: ./devProject
        run: echo "$(<projectsecrets_${{ steps.ProjectName.outputs.PROJECTNAME }}.json)"

      # Create Projects
      - name: 'Create Project ${{ steps.ProjectName.outputs.PROJECTNAME }} '
        working-directory: ./devProject
        #run: bash setup.sh -c './config/${{ matrix.configurations }}' -s './projectsecrets_${{ steps.ProjectName.outputs.PROJECTNAME }}.json'
        run: echo "Project completed."
      